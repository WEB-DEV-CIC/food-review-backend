# 🍽️ Food Review Backend

## 📖 Project Overview

Food Review Backend is a RESTful API service developed using Node.js and Express, aimed at providing a comprehensive food review platform. This service enables users to browse, filter by region, ingredients, or taste profiles, and review various food items. Administrators have additional privileges to manage users, food items, and reviews.

## ✨ Features

### 🔐 Authentication System

- User registration and login
- JWT-based role authentication (user/admin)

### 🍲 Food Management

- CRUD (Create, Read, Update, Delete) operations for food items
- Advanced filtering by region, ingredients, or taste profiles

### ⭐ Review System

- Review creation, viewing, and deletion by users
- Review moderation by admins

### 📊 Admin Dashboard

- Management of users, foods, and reviews

## 🛠️ Technology Stack

- **Runtime:** Node.js
- **Framework:** Express.js
- **Database:** PostgreSQL
- **Authentication:** JWT
- **Development Tools:** Nodemon, dotenv

## 📁 Project Structure

```
food-review-backend/
├── controllers/           # Route request handlers
├── routes/                # API endpoints
├── middleware/            # JWT Authentication Middleware
├── db.js                  # Database connection methods
├── seed.js                # Sample data seeding
├── setup-test-db.js       # Setup test database
├── index.js               # Application entry point
├── .env                   # Environment configuration
└── test/
    └── api-tests.http     # API endpoint testing
```

## 🚀 Setup & Installation

### ✅ Prerequisites

- Node.js v14+
- PostgreSQL v12+
- npm or yarn

### 📥 Installation Steps

1. Clone repository:

```bash
git clone <your-repo-url>
cd food-review-backend
```

2. Install dependencies:

```bash
npm install
```

3. Environment configuration (`.env`):

```env
PORT=3002
NODE_ENV=development
DB_HOST=localhost
DB_USER=postgres
DB_PASSWORD=your_password
DB_NAME=food_review_cql
DB_PORT=5432
TEST_DB_NAME=food_review_test
```

4. Database Setup:

```bash
createdb food_review_cql
createdb food_review_test

node setup-test-db.js
node seed.js
```

5. Start Server:

```bash
npm run dev
```

## 🔌 API Endpoints

### Authentication

- `POST /api/auth/register` - User registration
- `POST /api/auth/login` - User login

### Food

- `GET /api/foods` - Retrieve all foods (filterable)
- `GET /api/foods/:id` - Retrieve food by ID

### Reviews

- `POST /api/reviews` - Add a review
- `GET /api/reviews/food/:foodId` - Reviews for specific food

### Admin

- `GET /api/admin/users` - Retrieve all users
- `POST /api/admin/foods` - Add food
- `PUT /api/admin/foods/:id` - Update food
- `DELETE /api/admin/foods/:id` - Delete food
- `DELETE /api/admin/reviews/:id` - Delete review

## 🧪 Testing

Tests located in `test/api-tests.http`. Use VS Code REST Client extension to run.

```bash
npm run test
```

## 🔥 Error Handling

- `200 OK`
- `201 Created`
- `400 Bad Request`
- `401 Unauthorized`
- `403 Forbidden`
- `404 Not Found`
- `500 Internal Server Error`

## 💡 Development Best Practices

- Parameterize SQL queries
- Validate inputs thoroughly
- Use JWT tokens for secure access
- Regularly test endpoints

## 📚 Additional Resources

- [Node.js Docs](https://nodejs.org)
- [Express.js Docs](https://expressjs.com)
- [PostgreSQL Docs](https://www.postgresql.org)
- [JWT Guide](https://jwt.io)

## 📜 License

Licensed under the MIT License.

